{% block javascripts %}
    {{ parent() }}
    <script>
        // Utiliser une approche plus robuste pour l'initialisation
        document.addEventListener('DOMContentLoaded', function() {
            // Fonction pour tenter l'initialisation avec plusieurs essais
            let attempts = 0;
            const maxAttempts = 5;

            function attemptInitialization() {
                const searchField = document.querySelector('.adresse-autocomplete');
                if (searchField) {
                    console.log("Champ d'autocomplétion trouvé, initialisation...");
                    initAutocomplete(searchField);
                } else {
                    attempts++;
                    if (attempts < maxAttempts) {
                        console.log(`Tentative ${attempts}/${maxAttempts} - Champ non trouvé, nouvel essai dans 200ms`);
                        setTimeout(attemptInitialization, 200);
                    } else {
                        console.warn("Impossible de trouver le champ d'autocomplétion après plusieurs tentatives");
                    }
                }
            }

            // Démarrer la tentative d'initialisation
            setTimeout(attemptInitialization, 100);

            // Fonction pour initialiser l'autocomplétion
            function initAutocomplete(field) {
                field.addEventListener('input', debounce(function() {
                    const query = this.value;
                    if (query.length < 3) {
                        // Supprimer les suggestions si la requête est trop courte
                        const existingSuggestions = document.querySelector('.address-suggestions');
                        if (existingSuggestions) {
                            existingSuggestions.remove();
                        }
                        return;
                    }

                    fetch(`https://api-adresse.data.gouv.fr/search/?q=${encodeURIComponent(query)}&limit=5`)
                        .then(response => response.json())
                        .then(data => {
                            // Supprimer les suggestions précédentes
                            const existingSuggestions = document.querySelector('.address-suggestions');
                            if (existingSuggestions) {
                                existingSuggestions.remove();
                            }

                            // S'il n'y a pas de résultats, ne pas afficher la liste
                            if (!data.features || data.features.length === 0) {
                                return;
                            }

                            // Créer la liste des suggestions avec un style amélioré
                            const suggestions = document.createElement('div');
                            suggestions.classList.add('address-suggestions');

                            data.features.forEach((feature, index) => {
                                const suggestion = document.createElement('div');
                                suggestion.classList.add('suggestion');
                                if (index === 0) suggestion.classList.add('active');

                                // Formater l'affichage de manière plus élégante
                                const address = feature.properties;
                                suggestion.innerHTML = `
									<span class="suggestion-text">${address.label}</span>
								`;

                                suggestion.addEventListener('click', function() {
                                    // Remplir les champs avec les données de l'adresse
                                    const adresseItem = field.closest('.adresse-item');
                                    adresseItem.querySelector('[name$="[street]"]').value = address.name;
                                    adresseItem.querySelector('[name$="[postalCode]"]').value = address.postcode;
                                    adresseItem.querySelector('[name$="[city]"]').value = address.city;

                                    // Mettre à jour le champ de recherche
                                    field.value = address.label;

                                    // Animation de succès
                                    const parentDiv = adresseItem.closest('.adresse-item');
                                    parentDiv.classList.add('address-selected');
                                    setTimeout(() => {
                                        parentDiv.classList.remove('address-selected');
                                    }, 1000);

                                    // Supprimer les suggestions
                                    suggestions.remove();
                                });

                                suggestions.appendChild(suggestion);
                            });

                            // Ajouter les suggestions après le champ
                            field.parentNode.appendChild(suggestions);

                            // Ajouter un événement pour fermer les suggestions lors d'un clic ailleurs
                            document.addEventListener('click', function(e) {
                                if (!field.contains(e.target) && !suggestions.contains(e.target)) {
                                    suggestions.remove();
                                }
                            }, { once: true });
                        })
                        .catch(error => console.error('Erreur lors de la récupération des adresses:', error));
                }, 300));

                // Ajouter la gestion des touches (haut, bas, entrée)
                field.addEventListener('keydown', function(e) {
                    const suggestions = document.querySelector('.address-suggestions');
                    if (!suggestions) return;

                    const active = suggestions.querySelector('.suggestion.active');
                    const items = suggestions.querySelectorAll('.suggestion');

                    switch (e.key) {
                        case 'ArrowDown':
                            e.preventDefault();
                            if (active) {
                                active.classList.remove('active');
                                const next = active.nextElementSibling || items[0];
                                next.classList.add('active');
                                next.scrollIntoView({ block: 'nearest' });
                            } else if (items.length) {
                                items[0].classList.add('active');
                            }
                            break;

                        case 'ArrowUp':
                            e.preventDefault();
                            if (active) {
                                active.classList.remove('active');
                                const prev = active.previousElementSibling || items[items.length - 1];
                                prev.classList.add('active');
                                prev.scrollIntoView({ block: 'nearest' });
                            } else if (items.length) {
                                items[items.length - 1].classList.add('active');
                            }
                            break;

                        case 'Enter':
                            if (active) {
                                e.preventDefault();
                                active.click();
                            }
                            break;

                        case 'Escape':
                            suggestions.remove();
                            break;
                    }
                });
            }

            // Fonction debounce pour limiter les appels API
            function debounce(func, wait) {
                let timeout;
                return function executedFunction(...args) {
                    const later = () => {
                        clearTimeout(timeout);
                        func.apply(this, args);
                    };
                    clearTimeout(timeout);
                    timeout = setTimeout(later, wait);
                };
            }
        });
    </script>
{% endblock %}